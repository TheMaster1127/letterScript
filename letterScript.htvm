; letterScript: The Language Made For AI
; Copyright (C) 2025 TheMaster1127
; ------------------------------------------------------------------------
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
; ------------------------------------------------------------------------
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
; GNU General Public License for more details.
; ------------------------------------------------------------------------
; You should have received a copy of the GNU General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>.
; ------------------------------------------------------------------------

func bool isToken(arr str tokenArray, str line) {
Loop, % tokenArray.size() {
if (line = tokenArray[A_Index]) {
return true
}
}
return false


}

func str compiler(str code) {
str out := ""

arr str theIdNumOfThe34theVar
arr str getAllCharForTheFurtureSoIcanAddEscapeChar
str ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes := ""
str str21 := ""
str htCodeOUT754754 := ""
str OutFixDoubleQuotesInsideDoubleQuotes := ""
str keyWordEscpaeChar := "\"
int fixOutFixDoubleQuotesInsideDoubleQuotesFIXok := 0
int removeNexFixkeyWordEscpaeChar := 0
int theIdNumOfThe34 := 0
int areWEinSome34sNum := 0


Loop, Parse, code
{
theIdNumOfThe34theVar.add("")
theIdNumOfThe34theVar.add("")
}

Loop, Parse, code
{
theIdNumOfThe34theVar[A_Index] := theIdNumOfThe34theVar[A_Index] . Chr(34)
getAllCharForTheFurtureSoIcanAddEscapeChar.add(A_LoopField)
}

getAllCharForTheFurtureSoIcanAddEscapeChar.add(" ")

ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes := Chr(34) . "ihuiuuhuuhtheidFor" . str21 . "--" . str21 . "asds" . str21 . "as--" . str21 . "theuhtuwaesphoutr" . Chr(34)


Loop, Parse, code
{

if (A_LoopField = keyWordEscpaeChar) and (getAllCharForTheFurtureSoIcanAddEscapeChar[A_Index + 1] = Chr(34))
{
fixOutFixDoubleQuotesInsideDoubleQuotesFIXok := 1
OutFixDoubleQuotesInsideDoubleQuotes .= ReplaceFixWhitOutFixDoubleQuotesInsideDoubleQuotes
}
else
{
if (fixOutFixDoubleQuotesInsideDoubleQuotesFIXok != 1)
{
OutFixDoubleQuotesInsideDoubleQuotes .= A_LoopField
}
else
{
fixOutFixDoubleQuotesInsideDoubleQuotesFIXok := 0
}
}

}


code := OutFixDoubleQuotesInsideDoubleQuotes

if (keyWordEscpaeChar != Chr(92))
{
code := StrReplace(code, Chr(92), Chr(92) . Chr(92))
}




if (keyWordEscpaeChar = Chr(92))
{
Loop, Parse, code
{
if (A_LoopField = Chr(34))
{
areWEinSome34sNum++
}


if (areWEinSome34sNum = 1) 
{



if (A_LoopField != Chr(34))
{
if (A_LoopField = keyWordEscpaeChar)
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . Chr(92)
}
else
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . A_LoopField
}
}
else
{
theIdNumOfThe34++
htCodeOUT754754 .= "VYIGUOYIYVIUCFCYIUCFCYIGCYGICFHYFHCTCFTFDFGYGFC" . Chr(65) . Chr(65) . STR(theIdNumOfThe34) . Chr(65) . Chr(65)
}

}


if (areWEinSome34sNum = 2) or (areWEinSome34sNum = 0)
{
if (A_LoopField != Chr(34))
{
htCodeOUT754754 .= A_LoopField
}

areWEinSome34sNum := 0
}



}

}
else
{

Loop, Parse, code
{
if (A_LoopField = Chr(34))
{
areWEinSome34sNum++
}


if (areWEinSome34sNum = 1)
{



if (A_LoopField != Chr(34))
{
if (A_LoopField = keyWordEscpaeChar) and (keyWordEscpaeChar = getAllCharForTheFurtureSoIcanAddEscapeChar[A_Index + 1])
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . keyWordEscpaeChar
removeNexFixkeyWordEscpaeChar := 1
}
else if (A_LoopField = keyWordEscpaeChar)
{
if (removeNexFixkeyWordEscpaeChar != 1)
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . Chr(92)
}
else
{
removeNexFixkeyWordEscpaeChar := 0
}
}
else
{
theIdNumOfThe34theVar[theIdNumOfThe34] := theIdNumOfThe34theVar[theIdNumOfThe34] . A_LoopField
}

}
else
{
theIdNumOfThe34++
htCodeOUT754754 .= "VYIGUOYIYVIUCFCYIUCFCYIGCYGICFHYFHCTCFTFDFGYGFC" . Chr(65) . Chr(65) . STR(theIdNumOfThe34) . Chr(65) . Chr(65)

}

}


if (areWEinSome34sNum = 2) or (areWEinSome34sNum = 0)
{
if (A_LoopField != Chr(34))
{
htCodeOUT754754 .= A_LoopField
}

areWEinSome34sNum := 0
}



}
}






code := htCodeOUT754754

Loop, % theIdNumOfThe34
{
theIdNumOfThe34theVar[A_Index] := theIdNumOfThe34theVar[A_Index] . Chr(34)
}

theIdNumOfThe34theVar.add(Chr(34))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




str output := code
; STEP 1: Add space around any char that is NOT A-Z, 0-9, or _
output := RegExReplace(output, "([^A-Z0-9_])", " $1 ")
; STEP 2: Split digits stuck to uppercase-like vars (5PRINT → 5 PRINT), ONLY if it starts with digits
output := RegExReplace(output, "\b(\d+)(?=[A-Z_][A-Z0-9_]*)\b", "$1 ")
; STEP 3: Fix a lowercase or digit followed by an uppercase letter (e.g. a5iA → a5i A)
output := RegExReplace(output, "([a-z0-9])([A-Z])", "$1 $2")
; STEP 4: Split CamelCase like Agood → A good
output := RegExReplace(output, "\b([A-Z])([a-z])", " $1 $2")
; STEP 5: Add space around standalone uppercase vars
output := RegExReplace(output, "(?<![A-Za-z0-9_])([A-Z_][A-Z0-9_]*)(?![A-Za-z0-9_])", " $1 ")
; STEP 6: Fix wrongly split like `1 AA` → `1AA`
output := RegExReplace(output, "(\d+)\s+([A-Z_]{2,})", "$1$2")
; STEP 7: Cleanup double/multiple spaces
while (InStr(output, "  ")) {
    output := StrReplace(output, "  ", " ")
}
output := Trim(output)
str output_output := ""
int output_outputINT := 0
Loop, Parse, output, " " {
    output_outputINT := 0
    if (RegExMatch(A_LoopField, "^\d")) {
        Loop, Parse, A_LoopField {
            if (RegExMatch(A_LoopField, "\D")) and (output_outputINT = 0) {
                output_output .= " " . A_LoopField
                output_outputINT := 1
            }
            else {
                output_output .= A_LoopField
            }
        }
        output_output .= " "
    }
    else {
        output_output .= A_LoopField . " "
    }
}
code := output_output
;print(code)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;code
out := ""

code := StrReplace(code, " PRINT ", " PRINT ( ")
str code_code := ""
arr str code_codeARR
Loop, Parse, code, " " {
code_codeARR.add(A_LoopField)
}


code_codeARR.add(" ")
Loop, Parse, code, " " {
if (A_LoopField = "PRINT") and (code_codeARR[A_Index + 1] != "(") {
code_code .= A_LoopField . " ( "
}
else {
code_code .= A_LoopField . " "
}
}
StringTrimRight, code, code_code, 1



arr str continuationTokens := ["a", "=", "+", "-", ">", "<", "*", "/", "%", ".", "&", "|", "!", ":", "^", "\"]
arr str skipTokens := ["d", "i", "PRINT", "(", ")", Chr(96), "v", "s", "f", "e", "j", "w", "~", "p", "q", "k", "b", "l", "o", "m", "f", "y", "z", "h", "'", "r", "[", "u"]

arr str furture
Loop, Parse, code, " " {
furture.add(A_LoopField)
}
furture.add(" ")

; isToken(tokenArray, line)
int insideParentheses := 0
Loop, Parse, code, " " {

if (!isToken(skipTokens, A_LoopField) and !isToken(continuationTokens, A_LoopField) and !isToken(continuationTokens, furture[A_Index + 1]))
{
out .= A_LoopField . "; "
}
else {
out .= A_LoopField . " "
}

}
out := StrReplace(out, "; )", " );")
out := StrReplace(out, "; ;", ";")
StringTrimRight, code, out, 1
out := ""
; now fix some more parsenesis in nested stuff
insideParentheses := 0
Loop, Parse, code, " " {

if (insideParentheses > 1) {

if (InStr(A_LoopField, ";")) {
out .= StrReplace(A_LoopField, ";", "") . " "
}
else {
out .= A_LoopField . " "
}


}
else {
out .= A_LoopField . " "
}

if (A_LoopField = "(") {
insideParentheses++
}
if (A_LoopField = ")") or (A_LoopField = ");") {
insideParentheses--
}


}
StringTrimRight, code, out, 1
out := ""
; now remove if there is a ; before a continuation token
arr str furture2
Loop, Parse, code, " " {
furture2.add(A_LoopField)
}
furture2.add(" ")

Loop, Parse, code, " " {

if (InStr(A_LoopField, ";") and isToken(continuationTokens, furture2[A_Index + 1]))
{
out .= StrReplace(A_LoopField, ";", "") . " "
}
else {
out .= A_LoopField . " "
}

}

StringTrimRight, code, out, 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
out := ""
; NOW I CAN PARSE IT TO HTVM
code := Trim(StrReplace(code, ";", Chr(10)))
str str1 := ""
str str2 := ""
str str3 := ""
str str4 := ""
str str5 := ""
Loop, Parse, code, `n, `r {

if (SubStr(Trim(A_LoopField), 1, 2) = "# ") {
str1 := Trim(A_LoopField)
StringTrimLeft, str1, str1, 2
out .= "int " . StrReplace(str1, " a ", " := ") . Chr(10)
}
else if (SubStr(Trim(A_LoopField), 1, 2) = "i ") {
str1 := Trim(A_LoopField)
StringTrimLeft, str1, str1, 2
out .= "if (" . str1 . ") {" . Chr(10)
}
else if (Trim(A_LoopField) = "x") {
out .= "}" . Chr(10)
}
else {
str1 := Trim(A_LoopField)

str1 := RegExReplace(str1, "\bPRINT\b", "print")

str1 := StrReplace(str1, " ) ", ")")
str1 := StrReplace(str1, " ( ", "(")
str1 := StrReplace(str1, " )", ")")

out .= Trim(str1) . Chr(10)
}

}
StringTrimRight, code, out, 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




out := code
;print(out)

Loop, % theIdNumOfThe34 {
    if (theIdNumOfThe34 = A_Index + 1) {
        out := StrReplace(out, "VYIGUOYIYVIUCFCYIUCFCYIGCYGICFHYFHCTCFTFDFGYGFC" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(theIdNumOfThe34theVar[A_Index + 1], keyWordEscpaeChar, "\") . Chr(34))
    } else {
        out := StrReplace(out, "VYIGUOYIYVIUCFCYIUCFCYIGCYGICFHYFHCTCFTFDFGYGFC" . Chr(65) . Chr(65) . STR(A_Index + 1) . Chr(65) . Chr(65), StrReplace(theIdNumOfThe34theVar[A_Index + 1], keyWordEscpaeChar, "\"))
    }
}

return out
}

main
; test
print(compiler("#Aa5iA=5PRINT 500)PRINT 600+5)xPRINT 700)PRINT " . Chr(34) . "HI" . Chr(34) . ")"))
print("======================")
print(compiler("#VARa5iVAR=5PRINT " . Chr(34) . "Hello" . Chr(34) . ")x"))